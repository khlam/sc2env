import sys
import os
import random
import numpy as np
import shutil
from pysc2.maps import lib
from pysc2.lib import actions


# Convert the SC2Env timestep into a Gym-style tuple
def unpack_timestep(timestep):
    feature_map = timestep.observation.feature_minimap
    feature_screen = timestep.observation.feature_screen
    rgb_map = timestep.observation.rgb_minimap
    rgb_screen = timestep.observation.rgb_screen

    state = (feature_map, feature_screen, rgb_map, rgb_screen)
    reward = timestep.reward
    done = timestep.last()
    info = {}
    return state, reward, done, info


# A hack to get around some very odd code in pysc2.maps.lib
# This isn't necessary if you're using any of the maps that
# are hard-coded into pysc2
def register_map(map_dir, map_name):
    quiet_absl()

    print('Installing Map {}'.format(map_name))
    if map_name in globals():
        print('Map {}.SC2Map already exists, skipping registration'.format(map_name))
        return

    sc2_path = os.environ.get('SC2PATH', '~/StarCraftII')
    print('Looking for Maps directory in {}'.format(sc2_path))
    maps_install_dir = os.path.expanduser(os.path.join(sc2_path, 'Maps'))
    if map_name.endswith('.SC2Map'):
        map_name = map_name.replace('.SC2Map', '')
    map_filename = map_name + '.SC2Map'

    print('Copying map {} to maps directory {}'.format(map_filename, maps_install_dir))
    shutil.copy(map_filename, maps_install_dir)

    # Don't do this at home
    class_definition = dict(prefix=map_dir, filename=map_filename, players=1)
    constructed_class = type(map_name, (lib.Map,), class_definition)
    globals()[map_name] = constructed_class
    print('Installed map {}'.format(map_name))


# Just a hack to prevent errors generated by absl
# Needs to run before SC2Env() is called
def quiet_absl():
    import absl
    absl.flags.FLAGS(sys.argv)
