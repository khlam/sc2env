/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.sc2env.replay.Bar');
goog.provide('proto.sc2env.replay.BarChart');
goog.provide('proto.sc2env.replay.BarGroup');
goog.provide('proto.sc2env.replay.ExplanationDetails');
goog.provide('proto.sc2env.replay.ExplanationPoint');
goog.provide('proto.sc2env.replay.ExplanationPoints');
goog.provide('proto.sc2env.replay.Layer');
goog.provide('proto.sc2env.replay.Layers');
goog.provide('proto.sc2env.replay.LogFileEntry');
goog.provide('proto.sc2env.replay.MultiMessage');
goog.provide('proto.sc2env.replay.Record');
goog.provide('proto.sc2env.replay.ReplayChoiceConfig');
goog.provide('proto.sc2env.replay.SC2ReplaySessionConfig');
goog.provide('proto.sc2env.replay.Saliency');
goog.provide('proto.sc2env.replay.ScaiiPacket');
goog.provide('proto.sc2env.replay.StudyQuestion');
goog.provide('proto.sc2env.replay.StudyQuestionAnswer');
goog.provide('proto.sc2env.replay.StudyQuestions');
goog.provide('proto.sc2env.replay.UserCommand');
goog.provide('proto.sc2env.replay.UserCommand.UserCommandType');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.StudyQuestions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.StudyQuestions.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.StudyQuestions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.StudyQuestions.displayName = 'proto.sc2env.replay.StudyQuestions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.StudyQuestions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.StudyQuestions.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.StudyQuestions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.StudyQuestions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.StudyQuestions.toObject = function(includeInstance, msg) {
  var f, obj = {
    studyQuestionsList: jspb.Message.toObjectList(msg.getStudyQuestionsList(),
    proto.sc2env.replay.StudyQuestion.toObject, includeInstance),
    userId: jspb.Message.getField(msg, 2),
    treatmentId: jspb.Message.getField(msg, 3),
    answerFilename: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.StudyQuestions}
 */
proto.sc2env.replay.StudyQuestions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.StudyQuestions;
  return proto.sc2env.replay.StudyQuestions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.StudyQuestions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.StudyQuestions}
 */
proto.sc2env.replay.StudyQuestions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc2env.replay.StudyQuestion;
      reader.readMessage(value,proto.sc2env.replay.StudyQuestion.deserializeBinaryFromReader);
      msg.getStudyQuestionsList().push(value);
      msg.setStudyQuestionsList(msg.getStudyQuestionsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTreatmentId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswerFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.StudyQuestions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.StudyQuestions.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.StudyQuestions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.StudyQuestions.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStudyQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc2env.replay.StudyQuestion.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.StudyQuestions} The clone.
 */
proto.sc2env.replay.StudyQuestions.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.StudyQuestions} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated StudyQuestion study_questions = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.sc2env.replay.StudyQuestion>}
 */
proto.sc2env.replay.StudyQuestions.prototype.getStudyQuestionsList = function() {
  return /** @type{!Array.<!proto.sc2env.replay.StudyQuestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc2env.replay.StudyQuestion, 1));
};


/** @param {Array.<!proto.sc2env.replay.StudyQuestion>} value  */
proto.sc2env.replay.StudyQuestions.prototype.setStudyQuestionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.sc2env.replay.StudyQuestions.prototype.clearStudyQuestionsList = function() {
  this.setStudyQuestionsList([]);
};


/**
 * required string user_id = 2;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestions.prototype.getUserId = function() {
  return /** @type {string} */ (!this.hasUserId() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestions.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.sc2env.replay.StudyQuestions.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestions.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string treatment_id = 3;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestions.prototype.getTreatmentId = function() {
  return /** @type {string} */ (!this.hasTreatmentId() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestions.prototype.setTreatmentId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.StudyQuestions.prototype.clearTreatmentId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestions.prototype.hasTreatmentId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string answer_filename = 4;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestions.prototype.getAnswerFilename = function() {
  return /** @type {string} */ (!this.hasAnswerFilename() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestions.prototype.setAnswerFilename = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.sc2env.replay.StudyQuestions.prototype.clearAnswerFilename = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestions.prototype.hasAnswerFilename = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.StudyQuestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.StudyQuestion.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.StudyQuestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.StudyQuestion.displayName = 'proto.sc2env.replay.StudyQuestion';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.StudyQuestion.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.StudyQuestion.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.StudyQuestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.StudyQuestion} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.StudyQuestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    step: jspb.Message.getField(msg, 1),
    question: jspb.Message.getField(msg, 2),
    answersList: jspb.Message.getField(msg, 3),
    questionIdForStep: jspb.Message.getField(msg, 4),
    questionType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.StudyQuestion}
 */
proto.sc2env.replay.StudyQuestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.StudyQuestion;
  return proto.sc2env.replay.StudyQuestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.StudyQuestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.StudyQuestion}
 */
proto.sc2env.replay.StudyQuestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStep(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getAnswersList().push(value);
      msg.setAnswersList(msg.getAnswersList());
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestionIdForStep(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.StudyQuestion} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.StudyQuestion.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.StudyQuestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.StudyQuestion.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.StudyQuestion} The clone.
 */
proto.sc2env.replay.StudyQuestion.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.StudyQuestion} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string step = 1;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestion.prototype.getStep = function() {
  return /** @type {string} */ (!this.hasStep() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestion.prototype.setStep = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.StudyQuestion.prototype.clearStep = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestion.prototype.hasStep = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string question = 2;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestion.prototype.getQuestion = function() {
  return /** @type {string} */ (!this.hasQuestion() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestion.prototype.setQuestion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.sc2env.replay.StudyQuestion.prototype.clearQuestion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestion.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string answers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.sc2env.replay.StudyQuestion.prototype.getAnswersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.sc2env.replay.StudyQuestion.prototype.setAnswersList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.sc2env.replay.StudyQuestion.prototype.clearAnswersList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * required string question_id_for_step = 4;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestion.prototype.getQuestionIdForStep = function() {
  return /** @type {string} */ (!this.hasQuestionIdForStep() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestion.prototype.setQuestionIdForStep = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.sc2env.replay.StudyQuestion.prototype.clearQuestionIdForStep = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestion.prototype.hasQuestionIdForStep = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string question_type = 5;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestion.prototype.getQuestionType = function() {
  return /** @type {string} */ (!this.hasQuestionType() ? "" : jspb.Message.getField(this, 5));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestion.prototype.setQuestionType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.sc2env.replay.StudyQuestion.prototype.clearQuestionType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestion.prototype.hasQuestionType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.StudyQuestionAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc2env.replay.StudyQuestionAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.StudyQuestionAnswer.displayName = 'proto.sc2env.replay.StudyQuestionAnswer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.StudyQuestionAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.StudyQuestionAnswer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.StudyQuestionAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    step: jspb.Message.getField(msg, 1),
    questionNumber: jspb.Message.getField(msg, 2),
    question: jspb.Message.getField(msg, 3),
    answer: jspb.Message.getField(msg, 4),
    userId: jspb.Message.getField(msg, 5),
    treatmentId: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.StudyQuestionAnswer}
 */
proto.sc2env.replay.StudyQuestionAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.StudyQuestionAnswer;
  return proto.sc2env.replay.StudyQuestionAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.StudyQuestionAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.StudyQuestionAnswer}
 */
proto.sc2env.replay.StudyQuestionAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStep(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestionNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTreatmentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.StudyQuestionAnswer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.StudyQuestionAnswer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.StudyQuestionAnswer} The clone.
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.StudyQuestionAnswer} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string step = 1;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.getStep = function() {
  return /** @type {string} */ (!this.hasStep() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestionAnswer.prototype.setStep = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.StudyQuestionAnswer.prototype.clearStep = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.hasStep = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string question_number = 2;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.getQuestionNumber = function() {
  return /** @type {string} */ (!this.hasQuestionNumber() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestionAnswer.prototype.setQuestionNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.sc2env.replay.StudyQuestionAnswer.prototype.clearQuestionNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.hasQuestionNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string question = 3;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.getQuestion = function() {
  return /** @type {string} */ (!this.hasQuestion() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestionAnswer.prototype.setQuestion = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.StudyQuestionAnswer.prototype.clearQuestion = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string answer = 4;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.getAnswer = function() {
  return /** @type {string} */ (!this.hasAnswer() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestionAnswer.prototype.setAnswer = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.sc2env.replay.StudyQuestionAnswer.prototype.clearAnswer = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.hasAnswer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string user_id = 5;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.getUserId = function() {
  return /** @type {string} */ (!this.hasUserId() ? "" : jspb.Message.getField(this, 5));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestionAnswer.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.sc2env.replay.StudyQuestionAnswer.prototype.clearUserId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string treatment_id = 6;
 * @return {string}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.getTreatmentId = function() {
  return /** @type {string} */ (!this.hasTreatmentId() ? "" : jspb.Message.getField(this, 6));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.StudyQuestionAnswer.prototype.setTreatmentId = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.sc2env.replay.StudyQuestionAnswer.prototype.clearTreatmentId = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.StudyQuestionAnswer.prototype.hasTreatmentId = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.LogFileEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc2env.replay.LogFileEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.LogFileEntry.displayName = 'proto.sc2env.replay.LogFileEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.LogFileEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.LogFileEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.LogFileEntry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.LogFileEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getField(msg, 1),
    entry: jspb.Message.getField(msg, 2),
    isLastLine: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.LogFileEntry}
 */
proto.sc2env.replay.LogFileEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.LogFileEntry;
  return proto.sc2env.replay.LogFileEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.LogFileEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.LogFileEntry}
 */
proto.sc2env.replay.LogFileEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntry(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLastLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.LogFileEntry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.LogFileEntry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.LogFileEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.LogFileEntry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.LogFileEntry} The clone.
 */
proto.sc2env.replay.LogFileEntry.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.LogFileEntry} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string filename = 1;
 * @return {string}
 */
proto.sc2env.replay.LogFileEntry.prototype.getFilename = function() {
  return /** @type {string} */ (!this.hasFilename() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.LogFileEntry.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.LogFileEntry.prototype.clearFilename = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.LogFileEntry.prototype.hasFilename = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string entry = 2;
 * @return {string}
 */
proto.sc2env.replay.LogFileEntry.prototype.getEntry = function() {
  return /** @type {string} */ (!this.hasEntry() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.LogFileEntry.prototype.setEntry = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.sc2env.replay.LogFileEntry.prototype.clearEntry = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.LogFileEntry.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool is_last_line = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc2env.replay.LogFileEntry.prototype.getIsLastLine = function() {
  return /** @type {boolean} */ (!this.hasIsLastLine() ? false : jspb.Message.getField(this, 3));
};


/** @param {boolean|undefined} value  */
proto.sc2env.replay.LogFileEntry.prototype.setIsLastLine = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.LogFileEntry.prototype.clearIsLastLine = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.LogFileEntry.prototype.hasIsLastLine = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.ExplanationPoints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.ExplanationPoints.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.ExplanationPoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.ExplanationPoints.displayName = 'proto.sc2env.replay.ExplanationPoints';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.ExplanationPoints.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.ExplanationPoints.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.ExplanationPoints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.ExplanationPoints} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.ExplanationPoints.toObject = function(includeInstance, msg) {
  var f, obj = {
    explanationPointsList: jspb.Message.toObjectList(msg.getExplanationPointsList(),
    proto.sc2env.replay.ExplanationPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.ExplanationPoints}
 */
proto.sc2env.replay.ExplanationPoints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.ExplanationPoints;
  return proto.sc2env.replay.ExplanationPoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.ExplanationPoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.ExplanationPoints}
 */
proto.sc2env.replay.ExplanationPoints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc2env.replay.ExplanationPoint;
      reader.readMessage(value,proto.sc2env.replay.ExplanationPoint.deserializeBinaryFromReader);
      msg.getExplanationPointsList().push(value);
      msg.setExplanationPointsList(msg.getExplanationPointsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.ExplanationPoints} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ExplanationPoints.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.ExplanationPoints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ExplanationPoints.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getExplanationPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc2env.replay.ExplanationPoint.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.ExplanationPoints} The clone.
 */
proto.sc2env.replay.ExplanationPoints.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.ExplanationPoints} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ExplanationPoint explanation_points = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.sc2env.replay.ExplanationPoint>}
 */
proto.sc2env.replay.ExplanationPoints.prototype.getExplanationPointsList = function() {
  return /** @type{!Array.<!proto.sc2env.replay.ExplanationPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc2env.replay.ExplanationPoint, 1));
};


/** @param {Array.<!proto.sc2env.replay.ExplanationPoint>} value  */
proto.sc2env.replay.ExplanationPoints.prototype.setExplanationPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.sc2env.replay.ExplanationPoints.prototype.clearExplanationPointsList = function() {
  this.setExplanationPointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.ExplanationPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc2env.replay.ExplanationPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.ExplanationPoint.displayName = 'proto.sc2env.replay.ExplanationPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.ExplanationPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.ExplanationPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.ExplanationPoint} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.ExplanationPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    step: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2),
    title: jspb.Message.getField(msg, 3),
    description: jspb.Message.getField(msg, 4),
    saliency: (f = msg.getSaliency()) && proto.sc2env.replay.Saliency.toObject(includeInstance, f),
    barChart: (f = msg.getBarChart()) && proto.sc2env.replay.BarChart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.ExplanationPoint}
 */
proto.sc2env.replay.ExplanationPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.ExplanationPoint;
  return proto.sc2env.replay.ExplanationPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.ExplanationPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.ExplanationPoint}
 */
proto.sc2env.replay.ExplanationPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStep(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = new proto.sc2env.replay.Saliency;
      reader.readMessage(value,proto.sc2env.replay.Saliency.deserializeBinaryFromReader);
      msg.setSaliency(value);
      break;
    case 6:
      var value = new proto.sc2env.replay.BarChart;
      reader.readMessage(value,proto.sc2env.replay.BarChart.deserializeBinaryFromReader);
      msg.setBarChart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.ExplanationPoint} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ExplanationPoint.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.ExplanationPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ExplanationPoint.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSaliency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sc2env.replay.Saliency.serializeBinaryToWriter
    );
  }
  f = this.getBarChart();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sc2env.replay.BarChart.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.ExplanationPoint} The clone.
 */
proto.sc2env.replay.ExplanationPoint.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.ExplanationPoint} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 step = 1;
 * @return {number}
 */
proto.sc2env.replay.ExplanationPoint.prototype.getStep = function() {
  return /** @type {number} */ (!this.hasStep() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.sc2env.replay.ExplanationPoint.prototype.setStep = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.ExplanationPoint.prototype.clearStep = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationPoint.prototype.hasStep = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.sc2env.replay.ExplanationPoint.prototype.getId = function() {
  return /** @type {number} */ (!this.hasId() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.sc2env.replay.ExplanationPoint.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.sc2env.replay.ExplanationPoint.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationPoint.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.sc2env.replay.ExplanationPoint.prototype.getTitle = function() {
  return /** @type {string} */ (!this.hasTitle() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.ExplanationPoint.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.ExplanationPoint.prototype.clearTitle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationPoint.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.sc2env.replay.ExplanationPoint.prototype.getDescription = function() {
  return /** @type {string} */ (!this.hasDescription() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.ExplanationPoint.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.sc2env.replay.ExplanationPoint.prototype.clearDescription = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationPoint.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Saliency saliency = 5;
 * @return {proto.sc2env.replay.Saliency}
 */
proto.sc2env.replay.ExplanationPoint.prototype.getSaliency = function() {
  return /** @type{proto.sc2env.replay.Saliency} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.Saliency, 5));
};


/** @param {proto.sc2env.replay.Saliency|undefined} value  */
proto.sc2env.replay.ExplanationPoint.prototype.setSaliency = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc2env.replay.ExplanationPoint.prototype.clearSaliency = function() {
  this.setSaliency(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationPoint.prototype.hasSaliency = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BarChart bar_chart = 6;
 * @return {proto.sc2env.replay.BarChart}
 */
proto.sc2env.replay.ExplanationPoint.prototype.getBarChart = function() {
  return /** @type{proto.sc2env.replay.BarChart} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.BarChart, 6));
};


/** @param {proto.sc2env.replay.BarChart|undefined} value  */
proto.sc2env.replay.ExplanationPoint.prototype.setBarChart = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.sc2env.replay.ExplanationPoint.prototype.clearBarChart = function() {
  this.setBarChart(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationPoint.prototype.hasBarChart = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.BarChart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.BarChart.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.BarChart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.BarChart.displayName = 'proto.sc2env.replay.BarChart';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.BarChart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.BarChart.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.BarChart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.BarChart} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.BarChart.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.sc2env.replay.BarGroup.toObject, includeInstance),
    title: jspb.Message.getField(msg, 2),
    vTitle: jspb.Message.getField(msg, 3),
    hTitle: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.BarChart}
 */
proto.sc2env.replay.BarChart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.BarChart;
  return proto.sc2env.replay.BarChart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.BarChart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.BarChart}
 */
proto.sc2env.replay.BarChart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc2env.replay.BarGroup;
      reader.readMessage(value,proto.sc2env.replay.BarGroup.deserializeBinaryFromReader);
      msg.getGroupsList().push(value);
      msg.setGroupsList(msg.getGroupsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.BarChart} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.BarChart.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.BarChart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.BarChart.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc2env.replay.BarGroup.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.BarChart} The clone.
 */
proto.sc2env.replay.BarChart.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.BarChart} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated BarGroup groups = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.sc2env.replay.BarGroup>}
 */
proto.sc2env.replay.BarChart.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.sc2env.replay.BarGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc2env.replay.BarGroup, 1));
};


/** @param {Array.<!proto.sc2env.replay.BarGroup>} value  */
proto.sc2env.replay.BarChart.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.sc2env.replay.BarChart.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.sc2env.replay.BarChart.prototype.getTitle = function() {
  return /** @type {string} */ (!this.hasTitle() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.BarChart.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.sc2env.replay.BarChart.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.BarChart.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string v_title = 3;
 * @return {string}
 */
proto.sc2env.replay.BarChart.prototype.getVTitle = function() {
  return /** @type {string} */ (!this.hasVTitle() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.BarChart.prototype.setVTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.BarChart.prototype.clearVTitle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.BarChart.prototype.hasVTitle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string h_title = 4;
 * @return {string}
 */
proto.sc2env.replay.BarChart.prototype.getHTitle = function() {
  return /** @type {string} */ (!this.hasHTitle() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.BarChart.prototype.setHTitle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.sc2env.replay.BarChart.prototype.clearHTitle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.BarChart.prototype.hasHTitle = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.BarGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.BarGroup.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.BarGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.BarGroup.displayName = 'proto.sc2env.replay.BarGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.BarGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.BarGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.BarGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.BarGroup} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.BarGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getOptionalFloatingPointField(msg, 1),
    barsList: jspb.Message.toObjectList(msg.getBarsList(),
    proto.sc2env.replay.Bar.toObject, includeInstance),
    saliencyId: jspb.Message.getField(msg, 3),
    name: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.BarGroup}
 */
proto.sc2env.replay.BarGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.BarGroup;
  return proto.sc2env.replay.BarGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.BarGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.BarGroup}
 */
proto.sc2env.replay.BarGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.sc2env.replay.Bar;
      reader.readMessage(value,proto.sc2env.replay.Bar.deserializeBinaryFromReader);
      msg.getBarsList().push(value);
      msg.setBarsList(msg.getBarsList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaliencyId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.BarGroup} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.BarGroup.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.BarGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.BarGroup.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = this.getBarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sc2env.replay.Bar.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.BarGroup} The clone.
 */
proto.sc2env.replay.BarGroup.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.BarGroup} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.sc2env.replay.BarGroup.prototype.getValue = function() {
  return /** @type {number} */ (!this.hasValue() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.sc2env.replay.BarGroup.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.BarGroup.prototype.clearValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.BarGroup.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Bar bars = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.sc2env.replay.Bar>}
 */
proto.sc2env.replay.BarGroup.prototype.getBarsList = function() {
  return /** @type{!Array.<!proto.sc2env.replay.Bar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc2env.replay.Bar, 2));
};


/** @param {Array.<!proto.sc2env.replay.Bar>} value  */
proto.sc2env.replay.BarGroup.prototype.setBarsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.sc2env.replay.BarGroup.prototype.clearBarsList = function() {
  this.setBarsList([]);
};


/**
 * optional string saliency_id = 3;
 * @return {string}
 */
proto.sc2env.replay.BarGroup.prototype.getSaliencyId = function() {
  return /** @type {string} */ (!this.hasSaliencyId() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.BarGroup.prototype.setSaliencyId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.BarGroup.prototype.clearSaliencyId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.BarGroup.prototype.hasSaliencyId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.sc2env.replay.BarGroup.prototype.getName = function() {
  return /** @type {string} */ (!this.hasName() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.BarGroup.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.sc2env.replay.BarGroup.prototype.clearName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.BarGroup.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.Bar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc2env.replay.Bar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.Bar.displayName = 'proto.sc2env.replay.Bar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.Bar.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.Bar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.Bar} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.Bar.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getField(msg, 1),
    saliencyId: jspb.Message.getField(msg, 2),
    name: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.Bar}
 */
proto.sc2env.replay.Bar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.Bar;
  return proto.sc2env.replay.Bar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.Bar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.Bar}
 */
proto.sc2env.replay.Bar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaliencyId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.Bar} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Bar.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.Bar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Bar.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.Bar} The clone.
 */
proto.sc2env.replay.Bar.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.Bar} */ (jspb.Message.cloneMessage(this));
};


/**
 * required double value = 1;
 * @return {number}
 */
proto.sc2env.replay.Bar.prototype.getValue = function() {
  return /** @type {number} */ (!this.hasValue() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.sc2env.replay.Bar.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.Bar.prototype.clearValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.Bar.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string saliency_id = 2;
 * @return {string}
 */
proto.sc2env.replay.Bar.prototype.getSaliencyId = function() {
  return /** @type {string} */ (!this.hasSaliencyId() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.Bar.prototype.setSaliencyId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.sc2env.replay.Bar.prototype.clearSaliencyId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.Bar.prototype.hasSaliencyId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.sc2env.replay.Bar.prototype.getName = function() {
  return /** @type {string} */ (!this.hasName() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.Bar.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.Bar.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.Bar.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.Layer.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.Layer.displayName = 'proto.sc2env.replay.Layer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.Layer.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.Layer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    cellsList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    width: jspb.Message.getField(msg, 3),
    height: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.Layer}
 */
proto.sc2env.replay.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.Layer;
  return proto.sc2env.replay.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.Layer}
 */
proto.sc2env.replay.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.getCellsList().push(value);
      msg.setCellsList(msg.getCellsList());
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.Layer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Layer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Layer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.Layer} The clone.
 */
proto.sc2env.replay.Layer.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.Layer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sc2env.replay.Layer.prototype.getName = function() {
  return /** @type {string} */ (!this.hasName() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string?|undefined} value  */
proto.sc2env.replay.Layer.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.Layer.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.Layer.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated double cells = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.sc2env.replay.Layer.prototype.getCellsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {Array.<number>} value  */
proto.sc2env.replay.Layer.prototype.setCellsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.sc2env.replay.Layer.prototype.clearCellsList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * optional uint32 width = 3;
 * @return {number}
 */
proto.sc2env.replay.Layer.prototype.getWidth = function() {
  return /** @type {number} */ (!this.hasWidth() ? 0 : jspb.Message.getField(this, 3));
};


/** @param {number?|undefined} value  */
proto.sc2env.replay.Layer.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.sc2env.replay.Layer.prototype.clearWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.Layer.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 height = 4;
 * @return {number}
 */
proto.sc2env.replay.Layer.prototype.getHeight = function() {
  return /** @type {number} */ (!this.hasHeight() ? 0 : jspb.Message.getField(this, 4));
};


/** @param {number?|undefined} value  */
proto.sc2env.replay.Layer.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.sc2env.replay.Layer.prototype.clearHeight = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.Layer.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.Layers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.Layers.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.Layers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.Layers.displayName = 'proto.sc2env.replay.Layers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.Layers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.Layers.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.Layers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.Layers} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.Layers.toObject = function(includeInstance, msg) {
  var f, obj = {
    layersList: jspb.Message.toObjectList(msg.getLayersList(),
    proto.sc2env.replay.Layer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.Layers}
 */
proto.sc2env.replay.Layers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.Layers;
  return proto.sc2env.replay.Layers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.Layers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.Layers}
 */
proto.sc2env.replay.Layers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc2env.replay.Layer;
      reader.readMessage(value,proto.sc2env.replay.Layer.deserializeBinaryFromReader);
      msg.getLayersList().push(value);
      msg.setLayersList(msg.getLayersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.Layers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Layers.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.Layers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Layers.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc2env.replay.Layer.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.Layers} The clone.
 */
proto.sc2env.replay.Layers.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.Layers} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Layer layers = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.sc2env.replay.Layer>}
 */
proto.sc2env.replay.Layers.prototype.getLayersList = function() {
  return /** @type{!Array.<!proto.sc2env.replay.Layer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc2env.replay.Layer, 1));
};


/** @param {Array.<!proto.sc2env.replay.Layer>} value  */
proto.sc2env.replay.Layers.prototype.setLayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.sc2env.replay.Layers.prototype.clearLayersList = function() {
  this.setLayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.Saliency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc2env.replay.Saliency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.Saliency.displayName = 'proto.sc2env.replay.Saliency';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.Saliency.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.Saliency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.Saliency} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.Saliency.toObject = function(includeInstance, msg) {
  var f, obj = {
    saliencyMapMap: (f = msg.getSaliencyMapMap(true)) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.Saliency}
 */
proto.sc2env.replay.Saliency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.Saliency;
  return proto.sc2env.replay.Saliency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.Saliency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.Saliency}
 */
proto.sc2env.replay.Saliency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSaliencyMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.sc2env.replay.Layers.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.Saliency} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Saliency.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.Saliency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Saliency.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSaliencyMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.sc2env.replay.Layers.serializeBinaryToWriter);
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.Saliency} The clone.
 */
proto.sc2env.replay.Saliency.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.Saliency} */ (jspb.Message.cloneMessage(this));
};


/**
 * map<string, Layers> saliency_map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.sc2env.replay.Layers>}
 */
proto.sc2env.replay.Saliency.prototype.getSaliencyMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.sc2env.replay.Layers>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.sc2env.replay.Layers));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.MultiMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.MultiMessage.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.MultiMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.MultiMessage.displayName = 'proto.sc2env.replay.MultiMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.MultiMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.MultiMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.MultiMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.MultiMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.MultiMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetsList: jspb.Message.toObjectList(msg.getPacketsList(),
    proto.sc2env.replay.ScaiiPacket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.MultiMessage}
 */
proto.sc2env.replay.MultiMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.MultiMessage;
  return proto.sc2env.replay.MultiMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.MultiMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.MultiMessage}
 */
proto.sc2env.replay.MultiMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc2env.replay.ScaiiPacket;
      reader.readMessage(value,proto.sc2env.replay.ScaiiPacket.deserializeBinaryFromReader);
      msg.getPacketsList().push(value);
      msg.setPacketsList(msg.getPacketsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.MultiMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.MultiMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.MultiMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.MultiMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPacketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc2env.replay.ScaiiPacket.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.MultiMessage} The clone.
 */
proto.sc2env.replay.MultiMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.MultiMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ScaiiPacket packets = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.sc2env.replay.ScaiiPacket>}
 */
proto.sc2env.replay.MultiMessage.prototype.getPacketsList = function() {
  return /** @type{!Array.<!proto.sc2env.replay.ScaiiPacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc2env.replay.ScaiiPacket, 1));
};


/** @param {Array.<!proto.sc2env.replay.ScaiiPacket>} value  */
proto.sc2env.replay.MultiMessage.prototype.setPacketsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.sc2env.replay.MultiMessage.prototype.clearPacketsList = function() {
  this.setPacketsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.ScaiiPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sc2env.replay.ScaiiPacket.oneofGroups_);
};
goog.inherits(proto.sc2env.replay.ScaiiPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.ScaiiPacket.displayName = 'proto.sc2env.replay.ScaiiPacket';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sc2env.replay.ScaiiPacket.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.sc2env.replay.ScaiiPacket.SpecificMsgCase = {
  SPECIFIC_MSG_NOT_SET: 0,
  USER_COMMAND: 1,
  REPLAY_SESSION_CONFIG: 2,
  EXPL_DETAILS: 3,
  REPLAY_CHOICE_CONFIG: 4,
  STUDY_QUESTIONS: 5,
  STUDY_QUESTION_ANSWER: 6,
  LOG_FILE_ENTRY: 7
};

/**
 * @return {proto.sc2env.replay.ScaiiPacket.SpecificMsgCase}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getSpecificMsgCase = function() {
  return /** @type {proto.sc2env.replay.ScaiiPacket.SpecificMsgCase} */(jspb.Message.computeOneofCase(this, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.ScaiiPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.ScaiiPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.ScaiiPacket} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.ScaiiPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    userCommand: (f = msg.getUserCommand()) && proto.sc2env.replay.UserCommand.toObject(includeInstance, f),
    replaySessionConfig: (f = msg.getReplaySessionConfig()) && proto.sc2env.replay.SC2ReplaySessionConfig.toObject(includeInstance, f),
    explDetails: (f = msg.getExplDetails()) && proto.sc2env.replay.ExplanationDetails.toObject(includeInstance, f),
    replayChoiceConfig: (f = msg.getReplayChoiceConfig()) && proto.sc2env.replay.ReplayChoiceConfig.toObject(includeInstance, f),
    studyQuestions: (f = msg.getStudyQuestions()) && proto.sc2env.replay.StudyQuestions.toObject(includeInstance, f),
    studyQuestionAnswer: (f = msg.getStudyQuestionAnswer()) && proto.sc2env.replay.StudyQuestionAnswer.toObject(includeInstance, f),
    logFileEntry: (f = msg.getLogFileEntry()) && proto.sc2env.replay.LogFileEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.ScaiiPacket}
 */
proto.sc2env.replay.ScaiiPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.ScaiiPacket;
  return proto.sc2env.replay.ScaiiPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.ScaiiPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.ScaiiPacket}
 */
proto.sc2env.replay.ScaiiPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc2env.replay.UserCommand;
      reader.readMessage(value,proto.sc2env.replay.UserCommand.deserializeBinaryFromReader);
      msg.setUserCommand(value);
      break;
    case 2:
      var value = new proto.sc2env.replay.SC2ReplaySessionConfig;
      reader.readMessage(value,proto.sc2env.replay.SC2ReplaySessionConfig.deserializeBinaryFromReader);
      msg.setReplaySessionConfig(value);
      break;
    case 3:
      var value = new proto.sc2env.replay.ExplanationDetails;
      reader.readMessage(value,proto.sc2env.replay.ExplanationDetails.deserializeBinaryFromReader);
      msg.setExplDetails(value);
      break;
    case 4:
      var value = new proto.sc2env.replay.ReplayChoiceConfig;
      reader.readMessage(value,proto.sc2env.replay.ReplayChoiceConfig.deserializeBinaryFromReader);
      msg.setReplayChoiceConfig(value);
      break;
    case 5:
      var value = new proto.sc2env.replay.StudyQuestions;
      reader.readMessage(value,proto.sc2env.replay.StudyQuestions.deserializeBinaryFromReader);
      msg.setStudyQuestions(value);
      break;
    case 6:
      var value = new proto.sc2env.replay.StudyQuestionAnswer;
      reader.readMessage(value,proto.sc2env.replay.StudyQuestionAnswer.deserializeBinaryFromReader);
      msg.setStudyQuestionAnswer(value);
      break;
    case 7:
      var value = new proto.sc2env.replay.LogFileEntry;
      reader.readMessage(value,proto.sc2env.replay.LogFileEntry.deserializeBinaryFromReader);
      msg.setLogFileEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.ScaiiPacket} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ScaiiPacket.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.ScaiiPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ScaiiPacket.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sc2env.replay.UserCommand.serializeBinaryToWriter
    );
  }
  f = this.getReplaySessionConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sc2env.replay.SC2ReplaySessionConfig.serializeBinaryToWriter
    );
  }
  f = this.getExplDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sc2env.replay.ExplanationDetails.serializeBinaryToWriter
    );
  }
  f = this.getReplayChoiceConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sc2env.replay.ReplayChoiceConfig.serializeBinaryToWriter
    );
  }
  f = this.getStudyQuestions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sc2env.replay.StudyQuestions.serializeBinaryToWriter
    );
  }
  f = this.getStudyQuestionAnswer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sc2env.replay.StudyQuestionAnswer.serializeBinaryToWriter
    );
  }
  f = this.getLogFileEntry();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sc2env.replay.LogFileEntry.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.ScaiiPacket} The clone.
 */
proto.sc2env.replay.ScaiiPacket.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.ScaiiPacket} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UserCommand user_command = 1;
 * @return {proto.sc2env.replay.UserCommand}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getUserCommand = function() {
  return /** @type{proto.sc2env.replay.UserCommand} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.UserCommand, 1));
};


/** @param {proto.sc2env.replay.UserCommand|undefined} value  */
proto.sc2env.replay.ScaiiPacket.prototype.setUserCommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0], value);
};


proto.sc2env.replay.ScaiiPacket.prototype.clearUserCommand = function() {
  this.setUserCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ScaiiPacket.prototype.hasUserCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SC2ReplaySessionConfig replay_session_config = 2;
 * @return {proto.sc2env.replay.SC2ReplaySessionConfig}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getReplaySessionConfig = function() {
  return /** @type{proto.sc2env.replay.SC2ReplaySessionConfig} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.SC2ReplaySessionConfig, 2));
};


/** @param {proto.sc2env.replay.SC2ReplaySessionConfig|undefined} value  */
proto.sc2env.replay.ScaiiPacket.prototype.setReplaySessionConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0], value);
};


proto.sc2env.replay.ScaiiPacket.prototype.clearReplaySessionConfig = function() {
  this.setReplaySessionConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ScaiiPacket.prototype.hasReplaySessionConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ExplanationDetails expl_details = 3;
 * @return {proto.sc2env.replay.ExplanationDetails}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getExplDetails = function() {
  return /** @type{proto.sc2env.replay.ExplanationDetails} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.ExplanationDetails, 3));
};


/** @param {proto.sc2env.replay.ExplanationDetails|undefined} value  */
proto.sc2env.replay.ScaiiPacket.prototype.setExplDetails = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0], value);
};


proto.sc2env.replay.ScaiiPacket.prototype.clearExplDetails = function() {
  this.setExplDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ScaiiPacket.prototype.hasExplDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ReplayChoiceConfig replay_choice_config = 4;
 * @return {proto.sc2env.replay.ReplayChoiceConfig}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getReplayChoiceConfig = function() {
  return /** @type{proto.sc2env.replay.ReplayChoiceConfig} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.ReplayChoiceConfig, 4));
};


/** @param {proto.sc2env.replay.ReplayChoiceConfig|undefined} value  */
proto.sc2env.replay.ScaiiPacket.prototype.setReplayChoiceConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0], value);
};


proto.sc2env.replay.ScaiiPacket.prototype.clearReplayChoiceConfig = function() {
  this.setReplayChoiceConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ScaiiPacket.prototype.hasReplayChoiceConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StudyQuestions study_questions = 5;
 * @return {proto.sc2env.replay.StudyQuestions}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getStudyQuestions = function() {
  return /** @type{proto.sc2env.replay.StudyQuestions} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.StudyQuestions, 5));
};


/** @param {proto.sc2env.replay.StudyQuestions|undefined} value  */
proto.sc2env.replay.ScaiiPacket.prototype.setStudyQuestions = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0], value);
};


proto.sc2env.replay.ScaiiPacket.prototype.clearStudyQuestions = function() {
  this.setStudyQuestions(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ScaiiPacket.prototype.hasStudyQuestions = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StudyQuestionAnswer study_question_answer = 6;
 * @return {proto.sc2env.replay.StudyQuestionAnswer}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getStudyQuestionAnswer = function() {
  return /** @type{proto.sc2env.replay.StudyQuestionAnswer} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.StudyQuestionAnswer, 6));
};


/** @param {proto.sc2env.replay.StudyQuestionAnswer|undefined} value  */
proto.sc2env.replay.ScaiiPacket.prototype.setStudyQuestionAnswer = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0], value);
};


proto.sc2env.replay.ScaiiPacket.prototype.clearStudyQuestionAnswer = function() {
  this.setStudyQuestionAnswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ScaiiPacket.prototype.hasStudyQuestionAnswer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LogFileEntry log_file_entry = 7;
 * @return {proto.sc2env.replay.LogFileEntry}
 */
proto.sc2env.replay.ScaiiPacket.prototype.getLogFileEntry = function() {
  return /** @type{proto.sc2env.replay.LogFileEntry} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.LogFileEntry, 7));
};


/** @param {proto.sc2env.replay.LogFileEntry|undefined} value  */
proto.sc2env.replay.ScaiiPacket.prototype.setLogFileEntry = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.sc2env.replay.ScaiiPacket.oneofGroups_[0], value);
};


proto.sc2env.replay.ScaiiPacket.prototype.clearLogFileEntry = function() {
  this.setLogFileEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ScaiiPacket.prototype.hasLogFileEntry = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.UserCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.UserCommand.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.UserCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.UserCommand.displayName = 'proto.sc2env.replay.UserCommand';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.UserCommand.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.UserCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.UserCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.UserCommand} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.UserCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandType: jspb.Message.getField(msg, 1),
    argsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.UserCommand}
 */
proto.sc2env.replay.UserCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.UserCommand;
  return proto.sc2env.replay.UserCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.UserCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.UserCommand}
 */
proto.sc2env.replay.UserCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sc2env.replay.UserCommand.UserCommandType} */ (reader.readEnum());
      msg.setCommandType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getArgsList().push(value);
      msg.setArgsList(msg.getArgsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.UserCommand} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.UserCommand.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.UserCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.UserCommand.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.UserCommand} The clone.
 */
proto.sc2env.replay.UserCommand.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.UserCommand} */ (jspb.Message.cloneMessage(this));
};


/**
 * required UserCommandType command_type = 1;
 * @return {!proto.sc2env.replay.UserCommand.UserCommandType}
 */
proto.sc2env.replay.UserCommand.prototype.getCommandType = function() {
  return /** @type {!proto.sc2env.replay.UserCommand.UserCommandType} */ (!this.hasCommandType() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {proto.sc2env.replay.UserCommand.UserCommandType|undefined} value  */
proto.sc2env.replay.UserCommand.prototype.setCommandType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.UserCommand.prototype.clearCommandType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.UserCommand.prototype.hasCommandType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string args = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.sc2env.replay.UserCommand.prototype.getArgsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.sc2env.replay.UserCommand.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.sc2env.replay.UserCommand.prototype.clearArgsList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * @enum {number}
 */
proto.sc2env.replay.UserCommand.UserCommandType = {
  NONE: 0,
  EXPLAIN: 1,
  POLL_FOR_COMMANDS: 5,
  SET_SPEED: 8,
  SELECT_FILE: 9
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.ReplayChoiceConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.ReplayChoiceConfig.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.ReplayChoiceConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.ReplayChoiceConfig.displayName = 'proto.sc2env.replay.ReplayChoiceConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.ReplayChoiceConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.ReplayChoiceConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.ReplayChoiceConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.ReplayChoiceConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.ReplayChoiceConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    replayFilenamesList: jspb.Message.getField(msg, 1),
    userStudyMode: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.ReplayChoiceConfig}
 */
proto.sc2env.replay.ReplayChoiceConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.ReplayChoiceConfig;
  return proto.sc2env.replay.ReplayChoiceConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.ReplayChoiceConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.ReplayChoiceConfig}
 */
proto.sc2env.replay.ReplayChoiceConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getReplayFilenamesList().push(value);
      msg.setReplayFilenamesList(msg.getReplayFilenamesList());
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserStudyMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.ReplayChoiceConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ReplayChoiceConfig.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.ReplayChoiceConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ReplayChoiceConfig.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getReplayFilenamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.ReplayChoiceConfig} The clone.
 */
proto.sc2env.replay.ReplayChoiceConfig.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.ReplayChoiceConfig} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string replay_filenames = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.sc2env.replay.ReplayChoiceConfig.prototype.getReplayFilenamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.sc2env.replay.ReplayChoiceConfig.prototype.setReplayFilenamesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.sc2env.replay.ReplayChoiceConfig.prototype.clearReplayFilenamesList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * required bool user_study_mode = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc2env.replay.ReplayChoiceConfig.prototype.getUserStudyMode = function() {
  return /** @type {boolean} */ (!this.hasUserStudyMode() ? false : jspb.Message.getField(this, 6));
};


/** @param {boolean|undefined} value  */
proto.sc2env.replay.ReplayChoiceConfig.prototype.setUserStudyMode = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.sc2env.replay.ReplayChoiceConfig.prototype.clearUserStudyMode = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ReplayChoiceConfig.prototype.hasUserStudyMode = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.SC2ReplaySessionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc2env.replay.SC2ReplaySessionConfig.repeatedFields_, null);
};
goog.inherits(proto.sc2env.replay.SC2ReplaySessionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.SC2ReplaySessionConfig.displayName = 'proto.sc2env.replay.SC2ReplaySessionConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc2env.replay.SC2ReplaySessionConfig.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.SC2ReplaySessionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.SC2ReplaySessionConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonData: jspb.Message.getField(msg, 1),
    explanationsList: jspb.Message.toObjectList(msg.getExplanationsList(),
    proto.sc2env.replay.ExplanationPoint.toObject, includeInstance),
    rewardTypesList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.SC2ReplaySessionConfig}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.SC2ReplaySessionConfig;
  return proto.sc2env.replay.SC2ReplaySessionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.SC2ReplaySessionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.SC2ReplaySessionConfig}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonData(value);
      break;
    case 2:
      var value = new proto.sc2env.replay.ExplanationPoint;
      reader.readMessage(value,proto.sc2env.replay.ExplanationPoint.deserializeBinaryFromReader);
      msg.getExplanationsList().push(value);
      msg.setExplanationsList(msg.getExplanationsList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getRewardTypesList().push(value);
      msg.setRewardTypesList(msg.getRewardTypesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.SC2ReplaySessionConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.SC2ReplaySessionConfig.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getExplanationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sc2env.replay.ExplanationPoint.serializeBinaryToWriter
    );
  }
  f = this.getRewardTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.SC2ReplaySessionConfig} The clone.
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.SC2ReplaySessionConfig} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string json_data = 1;
 * @return {string}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.getJsonData = function() {
  return /** @type {string} */ (!this.hasJsonData() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.setJsonData = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.SC2ReplaySessionConfig.prototype.clearJsonData = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.hasJsonData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ExplanationPoint explanations = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.sc2env.replay.ExplanationPoint>}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.getExplanationsList = function() {
  return /** @type{!Array.<!proto.sc2env.replay.ExplanationPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc2env.replay.ExplanationPoint, 2));
};


/** @param {Array.<!proto.sc2env.replay.ExplanationPoint>} value  */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.setExplanationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.sc2env.replay.SC2ReplaySessionConfig.prototype.clearExplanationsList = function() {
  this.setExplanationsList([]);
};


/**
 * repeated string reward_types = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.getRewardTypesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.sc2env.replay.SC2ReplaySessionConfig.prototype.setRewardTypesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.sc2env.replay.SC2ReplaySessionConfig.prototype.clearRewardTypesList = function() {
  jspb.Message.setField(this, 3, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc2env.replay.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.Record.displayName = 'proto.sc2env.replay.Record';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.Record} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyframeInterval: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.Record}
 */
proto.sc2env.replay.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.Record;
  return proto.sc2env.replay.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.Record}
 */
proto.sc2env.replay.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeyframeInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.Record} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Record.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.Record.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.Record} The clone.
 */
proto.sc2env.replay.Record.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.Record} */ (jspb.Message.cloneMessage(this));
};


/**
 * required uint32 keyframe_interval = 1;
 * @return {number}
 */
proto.sc2env.replay.Record.prototype.getKeyframeInterval = function() {
  return /** @type {number} */ (!this.hasKeyframeInterval() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.sc2env.replay.Record.prototype.setKeyframeInterval = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.Record.prototype.clearKeyframeInterval = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.Record.prototype.hasKeyframeInterval = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc2env.replay.ExplanationDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc2env.replay.ExplanationDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc2env.replay.ExplanationDetails.displayName = 'proto.sc2env.replay.ExplanationDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc2env.replay.ExplanationDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.sc2env.replay.ExplanationDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc2env.replay.ExplanationDetails} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sc2env.replay.ExplanationDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    step: jspb.Message.getField(msg, 1),
    explPoint: (f = msg.getExplPoint()) && proto.sc2env.replay.ExplanationPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc2env.replay.ExplanationDetails}
 */
proto.sc2env.replay.ExplanationDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc2env.replay.ExplanationDetails;
  return proto.sc2env.replay.ExplanationDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc2env.replay.ExplanationDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc2env.replay.ExplanationDetails}
 */
proto.sc2env.replay.ExplanationDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStep(value);
      break;
    case 2:
      var value = new proto.sc2env.replay.ExplanationPoint;
      reader.readMessage(value,proto.sc2env.replay.ExplanationPoint.deserializeBinaryFromReader);
      msg.setExplPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sc2env.replay.ExplanationDetails} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ExplanationDetails.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc2env.replay.ExplanationDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sc2env.replay.ExplanationDetails.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getExplPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sc2env.replay.ExplanationPoint.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sc2env.replay.ExplanationDetails} The clone.
 */
proto.sc2env.replay.ExplanationDetails.prototype.cloneMessage = function() {
  return /** @type {!proto.sc2env.replay.ExplanationDetails} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 step = 1;
 * @return {number}
 */
proto.sc2env.replay.ExplanationDetails.prototype.getStep = function() {
  return /** @type {number} */ (!this.hasStep() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.sc2env.replay.ExplanationDetails.prototype.setStep = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.sc2env.replay.ExplanationDetails.prototype.clearStep = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationDetails.prototype.hasStep = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExplanationPoint expl_point = 2;
 * @return {proto.sc2env.replay.ExplanationPoint}
 */
proto.sc2env.replay.ExplanationDetails.prototype.getExplPoint = function() {
  return /** @type{proto.sc2env.replay.ExplanationPoint} */ (
    jspb.Message.getWrapperField(this, proto.sc2env.replay.ExplanationPoint, 2));
};


/** @param {proto.sc2env.replay.ExplanationPoint|undefined} value  */
proto.sc2env.replay.ExplanationDetails.prototype.setExplPoint = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.sc2env.replay.ExplanationDetails.prototype.clearExplPoint = function() {
  this.setExplPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.sc2env.replay.ExplanationDetails.prototype.hasExplPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


